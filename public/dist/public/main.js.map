{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/http.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"p {\\n    display: inline-block;\\n}\"","module.exports = \"<h1>Restful CRUD</h1>\\n<!-- waiting for a click on the button, which will invoke the getAll function in the class (aka component's .ts)file -->\\n<form (submit)=\\\"onSubmit()\\\">\\n  <!-- use the json pipe to see how newTask changes in real time -->\\n  <!--<p> {{ newTask | json }} </p>-->\\n  <input type=\\\"text\\\" name=\\\"newTask.title\\\" [(ngModel)]=\\\"newTask.title\\\" />\\n  <input type=\\\"text\\\" name=\\\"newTask.description\\\" [(ngModel)]=\\\"newTask.description\\\" />\\n  <input type=\\\"submit\\\" value=\\\"Create Task\\\" />\\n</form>\\n\\n<button (click)=\\\"getAll()\\\">Click me to get all tasks</button>\\n<!-- Be able to read all the JSON data in the task object -->\\n{{task | json}}\\n<!-- Loop through an array of tasks, calling each task t -->\\n<div *ngFor=\\\"let t of tasks\\\">\\n  <!-- Display each task's title -->\\n<p>{{t.title}}</p>\\n<!-- a button click will invoke getOne and pass it the task's _id and define what selectedTask is-->\\n<button (click)=\\\"getOne(t._id)\\\">Display task details</button>\\n<button (click)=\\\"editTask(t._id)\\\">Edit</button>\\n<div *ngIf=\\\"TaskEdit\\\">\\n  <!-- display the title and description of the selectedTask -->\\n  <form (submit)=\\\"onSubmitedit()\\\">\\n    <!-- use the json pipe to see how newTask changes in real time -->\\n    <!--<p> {{ newTask | json }} </p>-->\\n    <input type=\\\"text\\\" name=\\\"editThisTask.title\\\" [(ngModel)]=\\\"editThisTask.title\\\" />\\n    <input type=\\\"text\\\" name=\\\"editThisTask.description\\\" [(ngModel)]=\\\"editThisTask.description\\\" />\\n    <input type=\\\"submit\\\" value=\\\"Edit\\\" />\\n    <button (click)=\\\"editSave(t._id, data)\\\">Edit</button>\\n    \\n  </form>\\n\\n</div>\\n\\n<button (click)=\\\"deleteTask(t._id)\\\">Delete</button>\\n\\n\\n<!-- alternatively, this button also listens for a click and invokes choose() and passes it the entire task -->\\n<button (click)=\\\"choose(t)\\\">Choose a task</button>\\n</div>\\n<!-- check if selectedTask exists - -->\\n<div *ngIf=\\\"selectedTask\\\">\\n  <!-- display the title and description of the selectedTask -->\\n  <p>Task Details</p><br>\\n  <p>{{selectedTask.title}}</p>\\n  <p>{{selectedTask.description}}</p>\\n</div>\\n<div *ngIf=\\\"TaskDelete\\\">\\n  <!-- display the title and description of the selectedTask -->\\n  <p>The below task has been successfully deleted <p>\\n  <p>{{TaskDelete.title}}</p>\\n  <p>{{TaskDelete.description}}</p>\\n  \\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from './http.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n  // declare the tasks property to be an array - it will be reassigned when we get data from the server\n  tasks = [];\n  newTask: any;\n  editThisTask: any;\n\n  // declare the selectedTask property - it will be assigned when we get data\n  selectedTask;\n  TaskDelete;\n  TaskEdit;\n\n  // dependency injection - this is how our component will talk to the model (the service)\n  constructor(private _httpService: HttpService){}\n\n  ngOnInit(){\n    // this.getOne(\"5a7c8edfe2c0e253ad3e4a2b\");\n    this.newTask = { title: \"\", description: \"\" }\n  }\n  onSubmit() {\n    // Code to send off the form data (this.newTask) to the Servicecopy\n    //this.newTask = { title: this.newTask.title, description: this.newTask.description }\n    this.addTask(this.newTask)\n    // Reset this.newTask to a new, clean object.\n    this.newTask = { title: \"\", description: \"\" }\n  }\n  onSubmitedit() {\n    // Code to send off the form data (this.newTask) to the Servicecopy\n    // this.editThisTask = { title: this.editThisTask.title, description: this.editThisTask.description }\n   //this.editThisTask = { title: this.newTask.title, description: this.newTask.description }\n   // this.editTask(,this.editThisTask)\n    // Reset this.newTask to a new, clean object.\n    this.editThisTask = { title: \"\", description: \"\" }\n  }\n  addTask(newTask){\n    let obs = this._httpService.addTask(newTask);\n    obs.subscribe(res => {\n      console.log(\"sucessfully added task\",res);\n    })\n  }\n  editTask(id, data){\n    let obs = this._httpService.editTask(id, data);\n    obs.subscribe(res => {\n      if(res['message']==\"Success\"){\n        this.TaskEdit = res['task']\n      }\n      else {\n        console.log(\"sucessfully deleted task\",res);\n      }\n    })\n  }\n  deleteTask(id){\n    let obs = this._httpService.deleteTask(id);\n    obs.subscribe(res => {\n      if(res['message']==\"Success\"){\n        this.TaskDelete = res['task']\n      }\n      else {\n        console.log(\"sucessfully deleted task\",res);\n      }  \n    })\n  }\n  // user picks one task without another request to the server\n  choose(task){\n    this.selectedTask = task;\n  }\n  // user picks one and it uses the id to make a request to the server\n  getOne(id){\n    let obs = this._httpService.getOne(id);\n    obs.subscribe(res => {\n      console.log(\"Got a response from get one\", res);\n      if(res['message']==\"Success\"){\n        this.selectedTask = res['task']\n      }\n      else {\n        console.log(\"Error getting one task\");\n      }\n    })\n  }\n  // get all the data\n  getAll(){\n    // make the variable 'observable' and assign it to whatever is returned by the getAll method in the service\n    let observable = this._httpService.getAll();\n    // subscribe to the observable\n    observable.subscribe(res => {\n      // check if the response has a message of \"success\"\n      if(res['message']==\"Success\"){\n        console.log(\"We got a success\");\n        // assign our property of tasks to the array in the response\n        this.tasks = res['tasks'];\n      }\n      else {\n        console.log(\"There was an error\", res['error'])\n      }\n    })\n  }\n  \n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { HttpService } from './http.service';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [\n    HttpService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n  // give our service the module so that we can perform HTTP requests\n  constructor(private _http: HttpClient) {\n    console.log(\"Service is working\");  \n  }\n  // makes a request to the server on route /tasks\n  getAll(){\n    return this._http.get('/tasks');\n  }\n  // makes a request to the server on route /task/:id\n  getOne(id){\n    return this._http.get(`/task/${id}`);\n  }\n  addTask(newtask){\n    return this._http.post('/task', newtask);\n }\n editTask(id, data){\n  return this._http.put(`/task/${id}`, data);\n }\n deleteTask(id){\n  return this._http.delete(`/task/${id}`);\n}\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}